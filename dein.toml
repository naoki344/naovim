[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'zchee/deoplete-jedi'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'landscape',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['gitbranch', 'readonly', 'filename', 'modified'],
  \   ],
  \   'right': [
  \     ['lineinfo', 'syntastic'],
  \     ['percent'],
  \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_expand': {
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_type': {
  \   'syntastic': 'error',
  \ },
  \ }
let g:syntastic_mode_map = { 'mode': 'passive',
      \                      'active_filetypes': ['c', 'cpp'] }
augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'tomasr/molokai'

# make git convinient
[[plugins]]
repo = 'tpope/vim-fugitive'

#[[plugins]]
#repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_max_signs = 500
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_error = '☓'
let g:ale_sign_warning = '⚠'

" ロケーションリストの代わりにQuickFixを使用する
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" エラーと警告の一覧を見るためにウィンドウを開いておきたい
"let g:ale_open_list = 1
" エラーと警告がなくなっても開いたままにする
"let g:ale_keep_list_window_open = 1

let g:ale_linters = {
    \ 'python': ['python', 'flake8', 'pylint'],
    \ 'php': ['phpcs'],
    \ }

" 各ツールをFixerとして登録
" 'python': ['autopep8', 'yapf', 'isort'],
let g:ale_fixers = {
    \ 'python': [
	\    {buffer, lines -> {'command': 'yapf $%t -i --style="{indent_dictionary_value=True}" && isort -sl %t;', 'read_temporary_file': 1}}
	\ ],
    \ }
"let g:ale_fix_on_save = 1

let g:ale_php_phpcs_standard = 'WordPress'
"let g:ale_statusline_format = ['E%d', 'W%d', '']
'''

#[[plugins]]
#repo = 'neomake/neomake'
#if = "has('nvim')"
#hook_add = '''
#autocmd! BufEnter,BufWritePost * Neomake
#let g:neomake_python_enabled_makers = ['python', 'flake8', 'mypy']
#'''

#[[plugins]]
#repo = 'vim-syntastic/syntastic'
#if = "!has('nvim')"
#hook_add = '''
#let g:syntastic_always_populate_loc_list = 1
#let g:syntastic_check_on_open = 1
#let g:syntastic_check_on_wq = 0
#let g:syntastic_auto_loc_list = 1
#" for Python
#let g:syntastic_python_checkers = ['python', 'flake8', 'mypy']
#let g:syntastic_always_populate_loc_list = 1
#let g:syntastic_error_symbol = '☓'
#let g:syntastic_style_error_symbol = '☓'
#let g:syntastic_warning_symbol = '⚠'
#let g:syntastic_style_warning_symbol = '⚠'
#'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
autocmd FileType agit call s:my_agit_setting()
function! s:my_agit_setting()
  nmap <buffer> ch <Plug>(agit-git-cherry-pick)
  nmap <buffer> Rv <Plug>(agit-git-revert)
endfunction
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'


[[plugins]]
repo = 'Lokaltog/vim-powerline'


[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_add = '''
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
'''

[[plugins]]
repo = "aklt/plantuml-syntax"


[[plugins]]
repo = "vim-scripts/dbext.vim"
hook_add = '''
let g:dbext_default_profile_dev11 = 'type=SQLSRV:user=dev_ar:passwd=myzkmy01:host=10.12.1.11'
let g:dbext_default_profile = 'dev11'
'''

[[plugins]]
repo = "majutsushi/tagbar"
