# # [[plugins]]
# # repo = 'Shougo/deoplete.nvim'
# # hook_add = 'let g:deoplete#enable_at_startup = 1'
# 
# # [[plugins]]
# # repo = 'davidhalter/jedi-vim'
# # hook_add = '''
# # let g:jedi#goto_command = "<leader>d"
# # let g:jedi#goto_assignments_command = "<leader>g"
# # let g:jedi#goto_definitions_command = ""
# # let g:jedi#documentation_command = "K"
# # let g:jedi#usages_command = "<leader>n"
# # let g:jedi#completions_command = "<C-Space>"
# # let g:jedi#rename_command = "<leader>r"
# # let g:jedi#smart_auto_mappings = 1
# # '''
# 
# # [[plugins]]
# # repo = 'Shougo/neocomplete.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'landscape',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['gitbranch', 'readonly', 'filename', 'modified'],
  \   ],
  \   'right': [
  \     ['lineinfo', 'syntastic'],
  \     ['percent'],
  \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_expand': {
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \ 'component_type': {
  \   'syntastic': 'error',
  \ },
  \ }
let g:syntastic_mode_map = { 'mode': 'passive',
      \                      'active_filetypes': ['c', 'cpp'] }
augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'tomasr/molokai'

# make git convinient
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_max_signs = 500
'''

# [[plugins]]
# repo = 'dense-analysis/ale'
# hook_add = '''
# let g:ale_sign_error = '☓'
# let g:ale_sign_warning = '⚠'
# 
# " ロケーションリストの代わりにQuickFixを使用する
# let g:ale_set_loclist = 0
# let g:ale_set_quickfix = 1
# 
# " エラーと警告の一覧を見るためにウィンドウを開いておきたい
# "let g:ale_open_list = 1
# " エラーと警告がなくなっても開いたままにする
# "let g:ale_keep_list_window_open = 1
# 
# let g:ale_linters = {
#     \ 'python': ['python', 'flake8', 'pylint'],
#     \ 'php': ['phpcs'],
#     \ }
# 
# " 各ツールをFixerとして登録
# " 'python': ['autopep8', 'yapf', 'isort'],
# let g:ale_fixers = {
#     \ 'python': [
# 	\    {buffer, lines -> {'command': 'yapf $%t -i --style="{indent_dictionary_value=True}" && isort -sl %t;', 'read_temporary_file': 1}}
# 	\ ],
#     \ }
# "let g:ale_fix_on_save = 1
# 
# let g:ale_php_phpcs_standard = 'WordPress'
# "let g:ale_statusline_format = ['E%d', 'W%d', '']
# '''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
autocmd FileType agit call s:my_agit_setting()
function! s:my_agit_setting()
  nmap <buffer> ch <Plug>(agit-git-cherry-pick)
  nmap <buffer> Rv <Plug>(agit-git-revert)
endfunction
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'


[[plugins]]
repo = 'Lokaltog/vim-powerline'

[[plugins]]
repo = "aklt/plantuml-syntax"


[[plugins]]
repo = "majutsushi/tagbar"

[[plugins]]
repo = "posva/vim-vue"

[[plugins]]
repo = "rainglow/vim"

[[plugins]]
repo = "neoclide/coc.nvim"
build = './install.sh nightly'

# ------ FileExploler関連---------
[[plugins]]
repo = "Shougo/defx.nvim"
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> O
  \ defx#do_action('open_tree_recursive')
  nnoremap <silent><buffer><expr> A
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> a
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer><expr> t
  \ defx#do_action('open','tabnew')
endfunction
'''
# ------ FileExploler関連---------

[[plugins]]
repo = 'github/copilot.vim'

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
let g:go_metalinter_command='golangci-lint'
nnoremap <S-E> :GoReferrers<CR>
'''
